/**
 ******************************************************************************
 * @file      syscalls.c
 * @author    Auto-generated by STM32CubeIDE
 * @brief     Minimal System calls file. This file is necessary for the linker
 * to resolve standard library symbols, even in a bare-metal project.
 ******************************************************************************
 */

#include <sys/stat.h>
#include <stdlib.h>
#include <errno.h>
#include <stdio.h>
#include <signal.h>
#include <time.h>
#include <sys/time.h>
#include <sys/times.h>


/*
 * These are minimal implementations of system calls that are sometimes
 * referenced by the C library startup code. In our bare-metal application,
 * they don't need to do anything, but they must exist for the linker to
 * successfully build the final executable.
 */

int __io_putchar(int ch) __attribute__((weak));
int __io_getchar(void) __attribute__((weak));


int _close(int file)
{
	return -1;
}

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
	return 0;
}

int _isatty(int file)
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
	return 0;
}

int _read(int file, char *ptr, int len)
{
	return 0;
}

int _write(int file, char *ptr, int len)
{
	return len;
}

void* _sbrk(int incr)
{
    extern char _end; /* Defined by the linker */
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
    {
        heap_end = &_end;
    }
    prev_heap_end = heap_end;

    // Note: This is a very basic heap implementation and has no out-of-memory check
    heap_end += incr;
    return (void*) prev_heap_end;
}
